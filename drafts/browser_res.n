

Testing: warmup benchmarks  mutil.js:283:5
  Code: Math.sqrt(i)  ( squareroot )  mutil.js:286:7
    183.3901 Kfunc/s   avg : 7455.6198817911345  mutil.js:132:3
    183.9823 Kfunc/s   avg : 7455.619881798572  mutil.js:132:3
  Code: r+=i  ( fastest dummy test )  mutil.js:286:7
    868.8521 Kfunc/s   avg : 125002.5  mutil.js:132:3
    865.4441 Kfunc/s   avg : 125002.5  mutil.js:132:3
  Avg op/s 525417.1548749423  mutil.js:292:5
  mutil.js:282:5
Testing: stored, multi_trig, 100norm  mutil.js:283:5
  Code: r+=mulsin(a1000r100g[i])  ( mulsin )  mutil.js:286:7
    3.0392 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
    3.0693 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
  Code: r+=ysinm1(a1000r100g[i])  ( ysinm1 )  mutil.js:286:7
    212.5457  func/s   avg : 1234.4180284412962  mutil.js:132:3
    210.9144  func/s   avg : 1234.418028441294  mutil.js:132:3
  Code: r+=ysinm0(a1000r100g[i])  ( ysinm0 )  mutil.js:286:7
    2.3595 Kfunc/s   avg : 1234.4180284412641  mutil.js:132:3
    2.3590 Kfunc/s   avg : 1234.4180284412644  mutil.js:132:3
  Code: r+=ysinm100(a1000r100g[i])  ( ysinm100 )  mutil.js:286:7
    2.3470 Kfunc/s   avg : 1234.4180284412644  mutil.js:132:3
    2.3056 Kfunc/s   avg : 1234.4180284412644  mutil.js:132:3
        
  Avg op/s 1636.1591322565794  mutil.js:292:5
  mutil.js:282:5
  
Testing: ringed, multi_trig, 100norm  mutil.js:283:5
  Code: r+=mulsin(a1000r100g[i])  ( mulsin )  mutil.js:286:7
    3.0348 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
    3.0357 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
  Code: r+=ysin1(a1000r100g[i])  ( ysin1 )  mutil.js:286:7
    3.0351 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
    3.0347 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
  Code: r+=ysin2(a1000r100g[i])  ( ysin2 )  mutil.js:286:7
    2.8998 Kfunc/s   avg : 1234.4180284412632  mutil.js:132:3
    2.8919 Kfunc/s   avg : 1234.418028441263  mutil.js:132:3
  Code: r+=ysin12(a1000r100g[i])  ( ysin12 )  mutil.js:286:7
    2.9982 Kfunc/s   avg : 1234.418028441263  mutil.js:132:3
    3.0107 Kfunc/s   avg : 1234.4180284412628  mutil.js:132:3
  Code: r+=ysin60(a1000r100g[i])  ( ysin60 )  mutil.js:286:7
    6.2785 Kfunc/s   avg : 1234.4180284413833  mutil.js:132:3
    6.2938 Kfunc/s   avg : 1234.4180284414065  mutil.js:132:3
  Code: r+=ysin100(a1000r100g[i])  ( ysin100 )  mutil.js:286:7
    10.7018 Kfunc/s   avg : 1234.4180284416987  mutil.js:132:3
    10.7017 Kfunc/s   avg : 1234.418028441698  mutil.js:132:3
  Code: r+=ysinm0(a1000r100g[i])  ( ysinm0 )  mutil.js:286:7
    2.2983 Kfunc/s   avg : 1234.4180284412646  mutil.js:132:3
    2.2830 Kfunc/s   avg : 1234.4180284412644  mutil.js:132:3
  Code: r+=_ysin(a1000r100g[i])  ( _ysin )  mutil.js:286:7
    981.7038  func/s   avg : 1234.4180284412735  mutil.js:132:3
    983.2615  func/s   avg : 1234.418028441273  mutil.js:132:3
  Code: r+=zysin(a1000r100g[i])  ( zysin )  mutil.js:286:7
    2.4717 Kfunc/s   avg : 1234.4180284412641  mutil.js:132:3
    2.4723 Kfunc/s   avg : 1234.418028441264  mutil.js:132:3
  Avg op/s 3855.953618611383  mutil.js:292:5
  mutil.js:282:5
Testing: ringed, multi_trig, 20norm  mutil.js:283:5
  Code: r+=mulsin(a1000r20g[i])  ( mulsin )  mutil.js:286:7
    3.4656 Kfunc/s   avg : 1287.8474116390555  mutil.js:132:3
    3.4642 Kfunc/s   avg : 1287.8474116390555  mutil.js:132:3
  Code: r+=ysin1(a1000r20g[i])  ( ysin1 )  mutil.js:286:7
    3.8030 Kfunc/s   avg : 1287.8474116390557  mutil.js:132:3
    3.7996 Kfunc/s   avg : 1287.8474116390557  mutil.js:132:3
  Code: r+=ysin2(a1000r20g[i])  ( ysin2 )  mutil.js:286:7
    3.9101 Kfunc/s   avg : 1287.8474116390557  mutil.js:132:3
    3.9125 Kfunc/s   avg : 1287.8474116390557  mutil.js:132:3
  Code: r+=ysin12(a1000r20g[i])  ( ysin12 )  mutil.js:286:7
    16.1313 Kfunc/s   avg : 1287.8474116390512  mutil.js:132:3
    16.1409 Kfunc/s   avg : 1287.8474116390962  mutil.js:132:3
  Code: r+=ysin60(a1000r20g[i])  ( ysin60 )  mutil.js:286:7
    21.6367 Kfunc/s   avg : 1287.8474116393286  mutil.js:132:3
    21.6780 Kfunc/s   avg : 1287.8474116393368  mutil.js:132:3
  Code: r+=ysin100(a1000r20g[i])  ( ysin100 )  mutil.js:286:7
    21.8103 Kfunc/s   avg : 1287.8474116393318  mutil.js:132:3
    21.7765 Kfunc/s   avg : 1287.8474116393427  mutil.js:132:3
  Code: r+=ysinm0(a1000r20g[i])  ( ysinm0 )  mutil.js:286:7
    2.5868 Kfunc/s   avg : 1287.847411639055  mutil.js:132:3
    2.6051 Kfunc/s   avg : 1287.8474116390553  mutil.js:132:3
  Code: r+=_ysin(a1000r20g[i])  ( _ysin )  mutil.js:286:7
    1.0558 Kfunc/s   avg : 1287.8474116390526  mutil.js:132:3
    1.0483 Kfunc/s   avg : 1287.8474116390526  mutil.js:132:3
  Code: r+=zysin(a1000r20g[i])  ( zysin )  mutil.js:286:7
    2.7242 Kfunc/s   avg : 1287.8474116390553  mutil.js:132:3
    2.7274 Kfunc/s   avg : 1287.8474116390553  mutil.js:132:3
  Avg op/s 8570.907088636766  mutil.js:292:5
  mutil.js:282:5
Testing: ringed, multi_trig, 8norm  mutil.js:283:5
  Code: r+=mulsin(a1000r8g[i])  ( mulsin )  mutil.js:286:7
    3.7318 Kfunc/s   avg : 2851.648220783216  mutil.js:132:3
    3.7270 Kfunc/s   avg : 2851.6482207832146  mutil.js:132:3
  Code: r+=ysin1(a1000r8g[i])  ( ysin1 )  mutil.js:286:7
    4.8102 Kfunc/s   avg : 2851.648220783194  mutil.js:132:3
    4.8161 Kfunc/s   avg : 2851.6482207832337  mutil.js:132:3
  Code: r+=ysin2(a1000r8g[i])  ( ysin2 )  mutil.js:286:7
    5.9962 Kfunc/s   avg : 2851.648220783573  mutil.js:132:3
    5.9856 Kfunc/s   avg : 2851.648220783612  mutil.js:132:3
  Code: r+=ysin12(a1000r8g[i])  ( ysin12 )  mutil.js:286:7
    28.7961 Kfunc/s   avg : 2851.648220782253  mutil.js:132:3
    28.7849 Kfunc/s   avg : 2851.648220782022  mutil.js:132:3
  Code: r+=ysin60(a1000r8g[i])  ( ysin60 )  mutil.js:286:7
    28.8725 Kfunc/s   avg : 2851.6482207822296  mutil.js:132:3
    28.8305 Kfunc/s   avg : 2851.648220782001  mutil.js:132:3
  Code: r+=ysin100(a1000r8g[i])  ( ysin100 )  mutil.js:286:7
    28.6294 Kfunc/s   avg : 2851.6482207823105  mutil.js:132:3
    28.7121 Kfunc/s   avg : 2851.648220782034  mutil.js:132:3
  Code: r+=ysinm0(a1000r8g[i])  ( ysinm0 )  mutil.js:286:7
    2.8352 Kfunc/s   avg : 2851.648220783251  mutil.js:132:3
    2.8312 Kfunc/s   avg : 2851.64822078325  mutil.js:132:3
  Code: r+=_ysin(a1000r8g[i])  ( _ysin )  mutil.js:286:7
    1.1059 Kfunc/s   avg : 2851.6482207834642  mutil.js:132:3
    1.1061 Kfunc/s   avg : 2851.6482207834647  mutil.js:132:3
  Code: r+=zysin(a1000r8g[i])  ( zysin )  mutil.js:286:7
    2.9304 Kfunc/s   avg : 2851.6482207832455  mutil.js:132:3
    2.9238 Kfunc/s   avg : 2851.6482207832446  mutil.js:132:3
  Avg op/s 11968.05937671096  mutil.js:292:5
